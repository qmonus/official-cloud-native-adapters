// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/external-secrets/external-secrets/apis/externalsecrets/v1beta1

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	corev1 "k8s.io/api/core/v1"
)

// ClusterExternalSecretSpec defines the desired state of ClusterExternalSecret.
#ClusterExternalSecretSpec: {
	// The spec for the ExternalSecrets to be created
	externalSecretSpec: #ExternalSecretSpec @go(ExternalSecretSpec)

	// The name of the external secrets to be created defaults to the name of the ClusterExternalSecret
	// +optional
	externalSecretName: string @go(ExternalSecretName)

	// The labels to select by to find the Namespaces to create the ExternalSecrets in.
	namespaceSelector: metav1.#LabelSelector @go(NamespaceSelector)

	// The time in which the controller should reconcile it's objects and recheck namespaces for labels.
	refreshTime?: null | metav1.#Duration @go(RefreshInterval,*metav1.Duration)
}

#ClusterExternalSecretConditionType: string // #enumClusterExternalSecretConditionType

#enumClusterExternalSecretConditionType:
	#ClusterExternalSecretReady |
	#ClusterExternalSecretPartiallyReady |
	#ClusterExternalSecretNotReady

#ClusterExternalSecretReady:          #ClusterExternalSecretConditionType & "Ready"
#ClusterExternalSecretPartiallyReady: #ClusterExternalSecretConditionType & "PartiallyReady"
#ClusterExternalSecretNotReady:       #ClusterExternalSecretConditionType & "NotReady"

#ClusterExternalSecretStatusCondition: {
	type:   #ClusterExternalSecretConditionType @go(Type)
	status: corev1.#ConditionStatus             @go(Status)

	// +optional
	message?: string @go(Message)
}

// ClusterExternalSecretNamespaceFailure represents a failed namespace deployment and it's reason.
#ClusterExternalSecretNamespaceFailure: {
	// Namespace is the namespace that failed when trying to apply an ExternalSecret
	namespace: string @go(Namespace)

	// Reason is why the ExternalSecret failed to apply to the namespace
	// +optional
	reason?: string @go(Reason)
}

// ClusterExternalSecretStatus defines the observed state of ClusterExternalSecret.
#ClusterExternalSecretStatus: {
	// Failed namespaces are the namespaces that failed to apply an ExternalSecret
	// +optional
	failedNamespaces?: [...#ClusterExternalSecretNamespaceFailure] @go(FailedNamespaces,[]ClusterExternalSecretNamespaceFailure)

	// ProvisionedNamespaces are the namespaces where the ClusterExternalSecret has secrets
	// +optional
	provisionedNamespaces?: [...string] @go(ProvisionedNamespaces,[]string)

	// +optional
	conditions?: [...#ClusterExternalSecretStatusCondition] @go(Conditions,[]ClusterExternalSecretStatusCondition)
}

//+kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={externalsecrets},shortName=ces
//+kubebuilder:subresource:status
// ClusterExternalSecret is the Schema for the clusterexternalsecrets API.
#ClusterExternalSecret: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta           @go(ObjectMeta)
	spec?:     #ClusterExternalSecretSpec   @go(Spec)
	status?:   #ClusterExternalSecretStatus @go(Status)
}

// ClusterExternalSecretList contains a list of ClusterExternalSecret.
#ClusterExternalSecretList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ClusterExternalSecret] @go(Items,[]ClusterExternalSecret)
}
