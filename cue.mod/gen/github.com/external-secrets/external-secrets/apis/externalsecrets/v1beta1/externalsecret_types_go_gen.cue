// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/external-secrets/external-secrets/apis/externalsecrets/v1beta1

package v1beta1

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// SecretStoreRef defines which SecretStore to fetch the ExternalSecret data.
#SecretStoreRef: {
	// Name of the SecretStore resource
	name: string @go(Name)

	// Kind of the SecretStore resource (SecretStore or ClusterSecretStore)
	// Defaults to `SecretStore`
	// +optional
	kind?: string @go(Kind)
}

// ExternalSecretCreationPolicy defines rules on how to create the resulting Secret.
// +kubebuilder:validation:Enum=Owner;Orphan;Merge;None
#ExternalSecretCreationPolicy: string // #enumExternalSecretCreationPolicy

#enumExternalSecretCreationPolicy:
	#CreatePolicyOwner |
	#CreatePolicyOrphan |
	#CreatePolicyMerge |
	#CreatePolicyNone

// Owner creates the Secret and sets .metadata.ownerReferences to the ExternalSecret resource.
#CreatePolicyOwner: #ExternalSecretCreationPolicy & "Owner"

// Orphan creates the Secret and does not set the ownerReference.
// I.e. it will be orphaned after the deletion of the ExternalSecret.
#CreatePolicyOrphan: #ExternalSecretCreationPolicy & "Orphan"

// Merge does not create the Secret, but merges the data fields to the Secret.
#CreatePolicyMerge: #ExternalSecretCreationPolicy & "Merge"

// None does not create a Secret (future use with injector).
#CreatePolicyNone: #ExternalSecretCreationPolicy & "None"

// ExternalSecretDeletionPolicy defines rules on how to delete the resulting Secret.
// +kubebuilder:validation:Enum=Delete;Merge;Retain
#ExternalSecretDeletionPolicy: string // #enumExternalSecretDeletionPolicy

#enumExternalSecretDeletionPolicy:
	#DeletionPolicyDelete |
	#DeletionPolicyMerge |
	#DeletionPolicyRetain

// Delete deletes the secret if all provider secrets are deleted.
// If a secret gets deleted on the provider side and is not accessible
// anymore this is not considered an error and the ExternalSecret
// does not go into SecretSyncedError status.
#DeletionPolicyDelete: #ExternalSecretDeletionPolicy & "Delete"

// Merge removes keys in the secret, but not the secret itself.
// If a secret gets deleted on the provider side and is not accessible
// anymore this is not considered an error and the ExternalSecret
// does not go into SecretSyncedError status.
#DeletionPolicyMerge: #ExternalSecretDeletionPolicy & "Merge"

// Retain will retain the secret if all provider secrets have been deleted.
// If a provider secret does not exist the ExternalSecret gets into the
// SecretSyncedError status.
#DeletionPolicyRetain: #ExternalSecretDeletionPolicy & "Retain"

// ExternalSecretTemplateMetadata defines metadata fields for the Secret blueprint.
#ExternalSecretTemplateMetadata: {
	// +optional
	annotations?: {[string]: string} @go(Annotations,map[string]string)

	// +optional
	labels?: {[string]: string} @go(Labels,map[string]string)
}

// ExternalSecretTemplate defines a blueprint for the created Secret resource.
// we can not use native corev1.Secret, it will have empty ObjectMeta values: https://github.com/kubernetes-sigs/controller-tools/issues/448
#ExternalSecretTemplate: {
	// +optional
	type?:          corev1.#SecretType     @go(Type)
	engineVersion?: #TemplateEngineVersion @go(EngineVersion)

	// +optional
	metadata?: #ExternalSecretTemplateMetadata @go(Metadata)

	// +optional
	data?: {[string]: string} @go(Data,map[string]string)

	// +optional
	templateFrom?: [...#TemplateFrom] @go(TemplateFrom,[]TemplateFrom)
}

#TemplateEngineVersion: string // #enumTemplateEngineVersion

#enumTemplateEngineVersion:
	#TemplateEngineV1 |
	#TemplateEngineV2

#TemplateEngineV1: #TemplateEngineVersion & "v1"
#TemplateEngineV2: #TemplateEngineVersion & "v2"

// +kubebuilder:validation:MinProperties=1
// +kubebuilder:validation:MaxProperties=1
#TemplateFrom: {
	configMap?: null | #TemplateRef @go(ConfigMap,*TemplateRef)
	secret?:    null | #TemplateRef @go(Secret,*TemplateRef)
}

#TemplateRef: {
	name: string @go(Name)
	items: [...#TemplateRefItem] @go(Items,[]TemplateRefItem)
}

#TemplateRefItem: {
	key: string @go(Key)
}

// ExternalSecretTarget defines the Kubernetes Secret to be created
// There can be only one target per ExternalSecret.
#ExternalSecretTarget: {
	// Name defines the name of the Secret resource to be managed
	// This field is immutable
	// Defaults to the .metadata.name of the ExternalSecret resource
	// +optional
	name?: string @go(Name)

	// CreationPolicy defines rules on how to create the resulting Secret
	// Defaults to 'Owner'
	// +optional
	// +kubebuilder:default="Owner"
	creationPolicy?: #ExternalSecretCreationPolicy @go(CreationPolicy)

	// DeletionPolicy defines rules on how to delete the resulting Secret
	// Defaults to 'Retain'
	// +optional
	// +kubebuilder:default="Retain"
	deletionPolicy?: #ExternalSecretDeletionPolicy @go(DeletionPolicy)

	// Template defines a blueprint for the created Secret resource.
	// +optional
	template?: null | #ExternalSecretTemplate @go(Template,*ExternalSecretTemplate)

	// Immutable defines if the final secret will be immutable
	// +optional
	immutable?: bool @go(Immutable)
}

// ExternalSecretData defines the connection between the Kubernetes Secret key (spec.data.<key>) and the Provider data.
#ExternalSecretData: {
	secretKey: string                       @go(SecretKey)
	remoteRef: #ExternalSecretDataRemoteRef @go(RemoteRef)
}

// ExternalSecretDataRemoteRef defines Provider data location.
#ExternalSecretDataRemoteRef: {
	// Key is the key used in the Provider, mandatory
	key: string @go(Key)

	// Used to select a specific version of the Provider value, if supported
	// +optional
	version?: string @go(Version)

	// +optional
	// Used to select a specific property of the Provider value (if a map), if supported
	property?: string @go(Property)

	// +optional
	// Used to define a conversion Strategy
	// +kubebuilder:default="Default"
	conversionStrategy?: #ExternalSecretConversionStrategy @go(ConversionStrategy)
}

#ExternalSecretConversionStrategy: string // #enumExternalSecretConversionStrategy

#enumExternalSecretConversionStrategy:
	#ExternalSecretConversionDefault |
	#ExternalSecretConversionUnicode

#ExternalSecretConversionDefault: #ExternalSecretConversionStrategy & "Default"
#ExternalSecretConversionUnicode: #ExternalSecretConversionStrategy & "Unicode"

// +kubebuilder:validation:MinProperties=1
// +kubebuilder:validation:MaxProperties=1
#ExternalSecretDataFromRemoteRef: {
	// Used to extract multiple key/value pairs from one secret
	// +optional
	extract?: null | #ExternalSecretDataRemoteRef @go(Extract,*ExternalSecretDataRemoteRef)

	// Used to find secrets based on tags or regular expressions
	// +optional
	find?: null | #ExternalSecretFind @go(Find,*ExternalSecretFind)
}

#ExternalSecretFind: {
	// A root path to start the find operations.
	// +optional
	path?: null | string @go(Path,*string)

	// Finds secrets based on the name.
	// +optional
	name?: null | #FindName @go(Name,*FindName)

	// Find secrets based on tags.
	// +optional
	tags?: {[string]: string} @go(Tags,map[string]string)

	// +optional
	// Used to define a conversion Strategy
	// +kubebuilder:default="Default"
	conversionStrategy?: #ExternalSecretConversionStrategy @go(ConversionStrategy)
}

#FindName: {
	// Finds secrets base
	// +optional
	regexp?: string @go(RegExp)
}

// ExternalSecretSpec defines the desired state of ExternalSecret.
#ExternalSecretSpec: {
	secretStoreRef: #SecretStoreRef @go(SecretStoreRef)

	// +optional
	target?: #ExternalSecretTarget @go(Target)

	// RefreshInterval is the amount of time before the values are read again from the SecretStore provider
	// Valid time units are "ns", "us" (or "Âµs"), "ms", "s", "m", "h"
	// May be set to zero to fetch and create it once. Defaults to 1h.
	// +kubebuilder:default="1h"
	refreshInterval?: null | metav1.#Duration @go(RefreshInterval,*metav1.Duration)

	// Data defines the connection between the Kubernetes Secret keys and the Provider data
	// +optional
	data?: [...#ExternalSecretData] @go(Data,[]ExternalSecretData)

	// DataFrom is used to fetch all properties from a specific Provider data
	// If multiple entries are specified, the Secret keys are merged in the specified order
	// +optional
	dataFrom?: [...#ExternalSecretDataFromRemoteRef] @go(DataFrom,[]ExternalSecretDataFromRemoteRef)
}

#ExternalSecretConditionType: string // #enumExternalSecretConditionType

#enumExternalSecretConditionType:
	#ExternalSecretReady |
	#ExternalSecretDeleted

#ExternalSecretReady:   #ExternalSecretConditionType & "Ready"
#ExternalSecretDeleted: #ExternalSecretConditionType & "Deleted"

#ExternalSecretStatusCondition: {
	type:   #ExternalSecretConditionType @go(Type)
	status: corev1.#ConditionStatus      @go(Status)

	// +optional
	reason?: string @go(Reason)

	// +optional
	message?: string @go(Message)

	// +optional
	lastTransitionTime?: metav1.#Time @go(LastTransitionTime)
}

// ConditionReasonSecretSynced indicates that the secrets was synced.
#ConditionReasonSecretSynced: "SecretSynced"

// ConditionReasonSecretSyncedError indicates that there was an error syncing the secret.
#ConditionReasonSecretSyncedError: "SecretSyncedError"

// ConditionReasonSecretDeleted indicates that the secret has been deleted.
#ConditionReasonSecretDeleted: "SecretDeleted"
#ReasonInvalidStoreRef:        "InvalidStoreRef"
#ReasonUnavailableStore:       "UnavailableStore"
#ReasonProviderClientConfig:   "InvalidProviderClientConfig"
#ReasonUpdateFailed:           "UpdateFailed"
#ReasonUpdated:                "Updated"
#ReasonDeleted:                "Deleted"

#ExternalSecretStatus: {
	// +nullable
	// refreshTime is the time and date the external secret was fetched and
	// the target secret updated
	refreshTime?: metav1.#Time @go(RefreshTime)

	// SyncedResourceVersion keeps track of the last synced version
	syncedResourceVersion?: string @go(SyncedResourceVersion)

	// +optional
	conditions?: [...#ExternalSecretStatusCondition] @go(Conditions,[]ExternalSecretStatusCondition)
}

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// ExternalSecret is the Schema for the external-secrets API.
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Namespaced,categories={externalsecrets},shortName=es
// +kubebuilder:printcolumn:name="Store",type=string,JSONPath=`.spec.secretStoreRef.name`
// +kubebuilder:printcolumn:name="Refresh Interval",type=string,JSONPath=`.spec.refreshInterval`
// +kubebuilder:printcolumn:name="Status",type=string,JSONPath=`.status.conditions[?(@.type=="Ready")].reason`
#ExternalSecret: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta    @go(ObjectMeta)
	spec?:     #ExternalSecretSpec   @go(Spec)
	status?:   #ExternalSecretStatus @go(Status)
}

// AnnotationDataHash is used to ensure consistency.
#AnnotationDataHash: "reconcile.external-secrets.io/data-hash"

// ExternalSecretList contains a list of ExternalSecret resources.
#ExternalSecretList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ExternalSecret] @go(Items,[]ExternalSecret)
}
