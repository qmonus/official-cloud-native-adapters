// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/api/core/v1"
)

// VerificationPolicy defines the rules to verify Tekton resources.
// VerificationPolicy can config the mapping from resources to a list of public
// keys, so when verifying the resources we can use the corresponding public keys.
// +k8s:openapi-gen=true
#VerificationPolicy: {
	metav1.#TypeMeta

	// +optional
	metadata: metav1.#ObjectMeta @go(ObjectMeta)

	// Spec holds the desired state of the VerificationPolicy.
	spec: #VerificationPolicySpec @go(Spec)
}

// VerificationPolicyList contains a list of VerificationPolicy
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#VerificationPolicyList: {
	metav1.#TypeMeta

	// +optional
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#VerificationPolicy] @go(Items,[]VerificationPolicy)
}

// VerificationPolicySpec defines the patterns and authorities.
#VerificationPolicySpec: {
	// Resources defines the patterns of resources sources that should be subject to this policy.
	// For example, we may want to apply this Policy from a certain GitHub repo.
	// Then the ResourcesPattern should be valid regex. E.g. If using gitresolver, and we want to config keys from a certain git repo.
	// `ResourcesPattern` can be `https://github.com/tektoncd/catalog.git`, we will use regex to filter out those resources.
	resources: [...#ResourcePattern] @go(Resources,[]ResourcePattern)

	// Authorities defines the rules for validating signatures.
	authorities: [...#Authority] @go(Authorities,[]Authority)
}

// ResourcePattern defines the pattern of the resource source
#ResourcePattern: {
	// Pattern defines a resource pattern. Regex is created to filter resources based on `Pattern`
	// Example patterns:
	// GitHub resource: https://github.com/tektoncd/catalog.git, https://github.com/tektoncd/*
	// Bundle resource: gcr.io/tekton-releases/catalog/upstream/git-clone, gcr.io/tekton-releases/catalog/upstream/*
	// Hub resource: https://artifacthub.io/*,
	pattern: string @go(Pattern)
}

// The Authority block defines the keys for validating signatures.
#Authority: {
	// Name is the name for this authority.
	name: string @go(Name)

	// Key contains the public key to validate the resource.
	key?: null | #KeyRef @go(Key,*KeyRef)
}

// KeyRef defines the reference to a public key
#KeyRef: {
	// SecretRef sets a reference to a secret with the key.
	// +optional
	secretRef?: null | v1.#SecretReference @go(SecretRef,*v1.SecretReference)

	// Data contains the inline public key.
	// +optional
	data?: string @go(Data)

	// KMS contains the KMS url of the public key
	// Supported formats differ based on the KMS system used.
	// One example of a KMS url could be:
	// gcpkms://projects/[PROJECT]/locations/[LOCATION]>/keyRings/[KEYRING]/cryptoKeys/[KEY]/cryptoKeyVersions/[KEY_VERSION]
	// For more examples please refer https://docs.sigstore.dev/cosign/kms_support.
	// Note that the KMS is not supported yet.
	// +optional
	kms?: string @go(KMS)

	// HashAlgorithm always defaults to sha256 if the algorithm hasn't been explicitly set
	// +optional
	hashAlgorithm?: #HashAlgorithm @go(HashAlgorithm)
}

// HashAlgorithm defines the hash algorithm used for the public key
#HashAlgorithm: string // #enumHashAlgorithm

#enumHashAlgorithm:
	_#sha224 |
	_#sha256 |
	_#sha384 |
	_#sha512 |
	_#empty

_#sha224: #HashAlgorithm & "sha224"
_#sha256: #HashAlgorithm & "sha256"
_#sha384: #HashAlgorithm & "sha384"
_#sha512: #HashAlgorithm & "sha512"
_#empty:  #HashAlgorithm & ""
