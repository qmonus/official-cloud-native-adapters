// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/runtime"
	"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1beta1"
	"github.com/tektoncd/pipeline/pkg/apis/pipeline/pod"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runv1alpha1 "github.com/tektoncd/pipeline/pkg/apis/run/v1alpha1"
)

// EmbeddedRunSpec allows custom task definitions to be embedded
#EmbeddedRunSpec: {
	runtime.#TypeMeta

	// +optional
	metadata?: v1beta1.#PipelineTaskMetadata @go(Metadata)

	// Spec is a specification of a custom task
	// +optional
	spec?: runtime.#RawExtension @go(Spec)
}

// RunSpec defines the desired state of Run
#RunSpec: {
	// +optional
	ref?: null | v1beta1.#TaskRef @go(Ref,*v1beta1.TaskRef)

	// Spec is a specification of a custom task
	// +optional
	spec?: null | #EmbeddedRunSpec @go(Spec,*EmbeddedRunSpec)

	// +optional
	params?: [...v1beta1.#Param] @go(Params,[]v1beta1.Param)

	// Used for cancelling a run (and maybe more later on)
	// +optional
	status?: #RunSpecStatus @go(Status)

	// Status message for cancellation.
	// +optional
	statusMessage?: #RunSpecStatusMessage @go(StatusMessage)

	// Used for propagating retries count to custom tasks
	// +optional
	retries?: int @go(Retries)

	// +optional
	serviceAccountName: string @go(ServiceAccountName)

	// PodTemplate holds pod specific configuration
	// +optional
	podTemplate?: null | pod.#Template @go(PodTemplate,*pod.Template)

	// Time after which the custom-task times out.
	// Refer Go's ParseDuration documentation for expected format: https://golang.org/pkg/time/#ParseDuration
	// +optional
	timeout?: null | metav1.#Duration @go(Timeout,*metav1.Duration)

	// Workspaces is a list of WorkspaceBindings from volumes to workspaces.
	// +optional
	workspaces?: [...v1beta1.#WorkspaceBinding] @go(Workspaces,[]v1beta1.WorkspaceBinding)
}

// RunSpecStatus defines the taskrun spec status the user can provide
#RunSpecStatus: string // #enumRunSpecStatus

#enumRunSpecStatus:
	#RunSpecStatusCancelled

// RunSpecStatusCancelled indicates that the user wants to cancel the run,
// if not already cancelled or terminated
#RunSpecStatusCancelled: #RunSpecStatus & "RunCancelled"

// RunSpecStatusMessage defines human readable status messages for the TaskRun.
#RunSpecStatusMessage: string // #enumRunSpecStatusMessage

#enumRunSpecStatusMessage:
	#RunCancelledByPipelineMsg |
	#RunCancelledByPipelineTimeoutMsg

// RunCancelledByPipelineMsg indicates that the PipelineRun of which part this Run was
// has been cancelled.
#RunCancelledByPipelineMsg: #RunSpecStatusMessage & "Run cancelled as the PipelineRun it belongs to has been cancelled."

// RunCancelledByPipelineTimeoutMsg indicates that the Run was cancelled because the PipelineRun running it timed out.
#RunCancelledByPipelineTimeoutMsg: #RunSpecStatusMessage & "Run cancelled as the PipelineRun it belongs to has timed out."

// RunReason is an enum used to store all Run reason for the Succeeded condition that are controlled by the Run itself.
#RunReason: string // #enumRunReason

#enumRunReason:
	#RunReasonStarted |
	#RunReasonRunning |
	#RunReasonSuccessful |
	#RunReasonFailed |
	#RunReasonCancelled |
	#RunReasonTimedOut |
	#RunReasonWorkspaceNotSupported |
	#RunReasonPodTemplateNotSupported

// RunReasonStarted is the reason set when the Run has just started.
#RunReasonStarted: #RunReason & "Started"

// RunReasonRunning is the reason set when the Run is running.
#RunReasonRunning: #RunReason & "Running"

// RunReasonSuccessful is the reason set when the Run completed successfully.
#RunReasonSuccessful: #RunReason & "Succeeded"

// RunReasonFailed is the reason set when the Run completed with a failure.
#RunReasonFailed: #RunReason & "Failed"

// RunReasonCancelled must be used in the Condition Reason to indicate that a Run was cancelled.
#RunReasonCancelled: #RunReason & "RunCancelled"

// RunReasonTimedOut must be used in the Condition Reason to indicate that a Run was timed out.
#RunReasonTimedOut: #RunReason & "RunTimedOut"

// RunReasonWorkspaceNotSupported can be used in the Condition Reason to indicate that the
// Run contains a workspace which is not supported by this custom task.
#RunReasonWorkspaceNotSupported: #RunReason & "RunWorkspaceNotSupported"

// RunReasonPodTemplateNotSupported can be used in the Condition Reason to indicate that the
// Run contains a pod template which is not supported by this custom task.
#RunReasonPodTemplateNotSupported: #RunReason & "RunPodTemplateNotSupported"

// RunStatus defines the observed state of Run.
#RunStatus: runv1alpha1.#RunStatus

// RunStatusFields holds the fields of Run's status.  This is defined
// separately and inlined so that other types can readily consume these fields
// via duck typing.
#RunStatusFields: runv1alpha1.#RunStatusFields

// RunResult used to describe the results of a task
#RunResult: runv1alpha1.#RunResult

// Run represents a single execution of a Custom Task.
//
// +k8s:openapi-gen=true
#Run: {
	metav1.#TypeMeta

	// +optional
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +optional
	spec?: #RunSpec @go(Spec)

	// +optional
	status?: runv1alpha1.#RunStatus @go(Status)
}

// RunList contains a list of Run
#RunList: {
	metav1.#TypeMeta

	// +optional
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Run] @go(Items,[]Run)
}
